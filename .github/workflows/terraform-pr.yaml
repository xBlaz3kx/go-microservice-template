name: "Pull Request Terraform Plan"
on:
  pull_request:
    types: [ opened, synchronize ]
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'api/**'
      - 'features/**'
      - 'config/**'
      - 'deployments/**'
      - '*.md'

jobs:
  terraform:
    name: Terraform plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~1.3

      #- name: Configure AWS Credentials
      #  id: aws
      #  uses: aws-actions/configure-aws-credentials@v2
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Staging Plan
        id: plan-staging
        run: terraform plan -no-color
        continue-on-error: true
        env:
        # TF_WORKSPACE: staging
        # TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

      - name: Terraform Prod Plan
        id: plan-prod
        run: terraform plan -no-color
        continue-on-error: true
        env:
          # TF_WORKSPACE: production
          # TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

      - uses: actions/github-script@v7
        env:
          PLAN_STAGING: "terraform\n${{ steps.plan-staging.outputs.stdout }}"
          PLAN_PROD: "terraform\n${{ steps.plan-prod.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Output for terraform üîí
            #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ ${{ steps.validate.outputs.stdout }}
            #### Terraform Staging Plan üìñ \`${{ steps.plan-staging.outcome }}\`
            #### Terraform Prod Plan üìñ \`${{ steps.plan-prod.outcome }}\`

            <details><summary>Show Staging Plan</summary>

            \`\`\`\n
            ${process.env.PLAN_STAGING}
            \`\`\`

            </details>

            <details><summary>Show Prod Plan</summary>

            \`\`\`
            ${process.env.PLAN_PROD}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Staging Plan Status
        if: steps.plan-staging.outcome == 'failure'
        run: exit 1

      - name: Terraform Prod Plan Status
        if: steps.plan-prod.outcome == 'failure'
        run: exit 1